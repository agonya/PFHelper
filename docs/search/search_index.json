{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home Playable Factory In-House Helper Library (PFHelper) PFHelper is a library that was created for one simple purpose: to make the resident HTML5 developer's life a little bit easier. It is fully open sourced, and any member of the firm can edit and contribute to the classes. Authors: Tayfun Turgut, Tunahan G\u00f6rm\u00fc\u015f, Kadir Mert Okumu\u015f, Berkecan G\u00fcrer Usage Using PFHelper PFHelper is imported into a project by following these steps: At the very top of the game.js file in templatePhaser2D, add the following line under import 'phaser' : import PFHelperConstructor from \"../PFHelper/pfHelper\" ; Under the global variables lastWidth , lastHeight etc. add PFHelper global variable: let lastWidth , lastHeight , aspectRatio , isLandscape , squareness , main , data , gameEnded = false , scene , ui ; let PFHelper ; Under startGame() , instantiate the imported library using the following configuration object: PFHelper = new PFHelperConstructor ({ game : app . main . game , colors : true , maths : true , animations : true , dynamicTween : true , timer : true , tweenTrain : true , utility : true }); game: app.main.game : This parameter needs the main Phaser Game object. See {Phaser Game} colors : Enables ColorsHelper library. Description: ColorsHelper has many functions regarding colors. The main reason this was created is to enable users to choose colors from a predetermined set. maths : Enables MathsHelper library. Description: MathsHelper aims to aid you in doing somewhat complicated mathematical algorithms. It mainly has functions that are easy to calculate, but are susceptible of repeated usage in normal code. So, we wrapped functions that we liked and put them in MathsHelper for you. dynamicTween : Enables DynamicTween library. Description: A Tween is able to manipulate the properties of one or more objects to any given value, based on a duration and type of ease. They are rarely instantiated directly and instead should be created via the TweenManager. Dynamic Tween gets that idea of a tween and converts it into a real powerhouse. timer : Enables Timer library. Description: This library enables you to create, pause, resume and stop any number of timers for in-game uses. tweenTrain : Enables TweenTrain library. Description: A highly contreversial but useful library that is right on the middle spot of a tween and a dynamic tween. animations : Enables AnimationsHelper library. Description: This helper class contains functions that can make your life easier when developing the playables. They are mainly object manipulation wrappers, such as pulsating an object or creating a flow of gold from an origin to a target. After this, we think that calling resizeAll(lastWidth, lastHeight) is beneficial. You are ready to go!","title":"Home"},{"location":"#home","text":"","title":"Home"},{"location":"#playable-factory-in-house-helper-library-pfhelper","text":"PFHelper is a library that was created for one simple purpose: to make the resident HTML5 developer's life a little bit easier. It is fully open sourced, and any member of the firm can edit and contribute to the classes. Authors: Tayfun Turgut, Tunahan G\u00f6rm\u00fc\u015f, Kadir Mert Okumu\u015f, Berkecan G\u00fcrer","title":"Playable Factory In-House Helper Library (PFHelper)"},{"location":"#usage","text":"","title":"Usage"},{"location":"#using-pfhelper","text":"PFHelper is imported into a project by following these steps: At the very top of the game.js file in templatePhaser2D, add the following line under import 'phaser' : import PFHelperConstructor from \"../PFHelper/pfHelper\" ; Under the global variables lastWidth , lastHeight etc. add PFHelper global variable: let lastWidth , lastHeight , aspectRatio , isLandscape , squareness , main , data , gameEnded = false , scene , ui ; let PFHelper ; Under startGame() , instantiate the imported library using the following configuration object: PFHelper = new PFHelperConstructor ({ game : app . main . game , colors : true , maths : true , animations : true , dynamicTween : true , timer : true , tweenTrain : true , utility : true }); game: app.main.game : This parameter needs the main Phaser Game object. See {Phaser Game} colors : Enables ColorsHelper library. Description: ColorsHelper has many functions regarding colors. The main reason this was created is to enable users to choose colors from a predetermined set. maths : Enables MathsHelper library. Description: MathsHelper aims to aid you in doing somewhat complicated mathematical algorithms. It mainly has functions that are easy to calculate, but are susceptible of repeated usage in normal code. So, we wrapped functions that we liked and put them in MathsHelper for you. dynamicTween : Enables DynamicTween library. Description: A Tween is able to manipulate the properties of one or more objects to any given value, based on a duration and type of ease. They are rarely instantiated directly and instead should be created via the TweenManager. Dynamic Tween gets that idea of a tween and converts it into a real powerhouse. timer : Enables Timer library. Description: This library enables you to create, pause, resume and stop any number of timers for in-game uses. tweenTrain : Enables TweenTrain library. Description: A highly contreversial but useful library that is right on the middle spot of a tween and a dynamic tween. animations : Enables AnimationsHelper library. Description: This helper class contains functions that can make your life easier when developing the playables. They are mainly object manipulation wrappers, such as pulsating an object or creating a flow of gold from an origin to a target. After this, we think that calling resizeAll(lastWidth, lastHeight) is beneficial. You are ready to go!","title":"Using PFHelper"},{"location":"about/","text":"About How YOU can contribute to the project PFHelper is readily hosted on github, in a private repository. Any number of collaborators can contact the creators to gain access to the repo. After that, changing/adding anything and creating pull requests is the way to go to further improve the project. Upcoming improvements to the helper As you may have noticed, some functions do not have ts/jsdoc explanations before them, or some classes do not have their respected pages. This project has been brought to life as a side project, so some informations and documentations are still pending for development. We as the team would love it to have you onboard, and develop the helper further, together. What about file size? The helper files, if all are imported, are roughly about 50 KB in size, including all comment blocks that serve as intellisense when typing out code. After webpack does its magic, we estimate this to be around 20-25 KB fully imported, so keep that in mind.","title":"About"},{"location":"about/#about","text":"","title":"About"},{"location":"about/#how-you-can-contribute-to-the-project","text":"PFHelper is readily hosted on github, in a private repository. Any number of collaborators can contact the creators to gain access to the repo. After that, changing/adding anything and creating pull requests is the way to go to further improve the project.","title":"How YOU can contribute to the project"},{"location":"about/#upcoming-improvements-to-the-helper","text":"As you may have noticed, some functions do not have ts/jsdoc explanations before them, or some classes do not have their respected pages. This project has been brought to life as a side project, so some informations and documentations are still pending for development. We as the team would love it to have you onboard, and develop the helper further, together.","title":"Upcoming improvements to the helper"},{"location":"about/#what-about-file-size","text":"The helper files, if all are imported, are roughly about 50 KB in size, including all comment blocks that serve as intellisense when typing out code. After webpack does its magic, we estimate this to be around 20-25 KB fully imported, so keep that in mind.","title":"What about file size?"},{"location":"animationHelper/","text":"Animations Helper Introduction AnimationHelper has been written to facilitate the animations we often use in our projects. Author: Tayfun Turgut, Berkecan G\u00fcrer Functions List createBurstFlowAnimation() pulsate() unpulsate() buttonify() Create Burst Flow Animation This animation is produced by creating the given object as many times as desired and goes to the given position in the given time. It's very helpful when you have to create gold flow animation like idle games. Usage PFHelper . createBurstFlowAnimation ( from , to , amount , atlas , key , duration ); from Object that contains x and y values. Refers to the starting point of the objects to be created. (obj) to Object that contains x and y values. Refers to the end point of the objects to be created. (obj) amount Number of the objects to be created. (number) atlas Does the texture of the key come from an atlas? (boolean) key Key of the image that is wanted to create. (string) duration Duration of the animation in seconds. (number) Pulsate Creates pulse animation for buttons. Usage PFHelper . pulsate ( target , scaleMultiplier , duration ); target An object to animate. (obj) scaleMultiplier The value to be multiplied by the original scale value. This value indicates how much the object will pulse. We recommend you to give a number between 0-1 to create an \"invard\" pulse to avoid resizing issues. (float) duration Duration of the animation in milliseconds. (number) Unpulsate Removes the pulse animation that was created by the \" Pulsate \" function. Usage PFHelper . unpulsate ( target ); target An animated object. (obj) Buttonify To create a feeling when a button is pressed, it creates an animation that decreases its scale while it is pressed. Also it calls callback function when the button is clicked. Usage PFHelper . buttonify ( target , callback ); target An object (preferably a button) for click animation. (obj) callback Callback function that calls after button is clicked. (function)","title":"AnimationsHelper"},{"location":"animationHelper/#animations-helper","text":"","title":"Animations Helper"},{"location":"animationHelper/#introduction","text":"AnimationHelper has been written to facilitate the animations we often use in our projects. Author: Tayfun Turgut, Berkecan G\u00fcrer","title":"Introduction"},{"location":"animationHelper/#functions-list","text":"createBurstFlowAnimation() pulsate() unpulsate() buttonify()","title":"Functions List"},{"location":"animationHelper/#create-burst-flow-animation","text":"This animation is produced by creating the given object as many times as desired and goes to the given position in the given time. It's very helpful when you have to create gold flow animation like idle games.","title":"Create Burst Flow Animation"},{"location":"animationHelper/#usage","text":"PFHelper . createBurstFlowAnimation ( from , to , amount , atlas , key , duration ); from Object that contains x and y values. Refers to the starting point of the objects to be created. (obj) to Object that contains x and y values. Refers to the end point of the objects to be created. (obj) amount Number of the objects to be created. (number) atlas Does the texture of the key come from an atlas? (boolean) key Key of the image that is wanted to create. (string) duration Duration of the animation in seconds. (number)","title":"Usage"},{"location":"animationHelper/#pulsate","text":"Creates pulse animation for buttons.","title":"Pulsate"},{"location":"animationHelper/#usage_1","text":"PFHelper . pulsate ( target , scaleMultiplier , duration ); target An object to animate. (obj) scaleMultiplier The value to be multiplied by the original scale value. This value indicates how much the object will pulse. We recommend you to give a number between 0-1 to create an \"invard\" pulse to avoid resizing issues. (float) duration Duration of the animation in milliseconds. (number)","title":"Usage"},{"location":"animationHelper/#unpulsate","text":"Removes the pulse animation that was created by the \" Pulsate \" function.","title":"Unpulsate"},{"location":"animationHelper/#usage_2","text":"PFHelper . unpulsate ( target ); target An animated object. (obj)","title":"Usage"},{"location":"animationHelper/#buttonify","text":"To create a feeling when a button is pressed, it creates an animation that decreases its scale while it is pressed. Also it calls callback function when the button is clicked.","title":"Buttonify"},{"location":"animationHelper/#usage_3","text":"PFHelper . buttonify ( target , callback ); target An object (preferably a button) for click animation. (obj) callback Callback function that calls after button is clicked. (function)","title":"Usage"},{"location":"colorsHelper/","text":"Colors Helper Introduction ColorsHelper has many functions regarding colors. The main reason this was created is to enable users to choose colors from a predetermined set. Author: Tunahan G\u00f6rm\u00fc\u015f Functions List getColor() getRandomColor() getGradientColorArray() colorLerp() convertToHex() convertToRGB() Get Color PFHelper . getColor ( color , subCodes , hex ); color Name of the color (string) subCodes Color tone (string) hex If true, it starts with \"#\" prefix. If false it starts with \"0x\" prefix. (boolean) There is two different json file contains different colors. Colors source See colors.json to check out all the colors in our repository! Colors With Subs Usage let color = PFHelper . getColor ( \"red\" , \"900\" , true ); // subCodes: 50, 100, 200, 300, 400, 500, 600, 700, 800, 900, a100, a200, a400, a700 Sub Codes You can think of sub-codes as a color tone. If the value is low, it means light and high if it is dark. Colors The sub-codes of the colors shown below are selected as 900. red pink purple deeppurple indigo blue lightblue cyan teal green lightgreen lime yellow amber orange deeporange brown grey bluegrey Color Palette Usage let color = PFHelper . getColor ( \"red\" , \"\" , true ); Color Palette You don't have to write anything on subCode. Colors AliceBlue #F0F8FF AntiqueWhite #FAEBD7 Aqua #00FFFF Aquamarine #7FFFD4 Azure #F0FFFF Beige #F5F5DC Bisque #FFE4C4 Black #000000 BlanchedAlmond #FFEBCD Blue #0000FF BlueViolet #8A2BE2 Brown #A52A2A BurlyWood #DEB887 CadetBlue #5F9EA0 Chartreuse #7FFF00 Chocolate #D2691E Coral #FF7F50 CornflowerBlue #6495ED Cornsilk #FFF8DC Crimson #DC143C Cyan #00FFFF DarkBlue #00008B DarkCyan #008B8B DarkGoldenrod #B8860B DarkGray #A9A9A9 DarkGreen #006400 DarkKhaki #BDB76B DarkMagenta #8B008B DarkOliveGreen #556B2F DarkOrange #FF8C00 DarkOrchid #9932CC DarkRed #8B0000 DarkSalmon #E9967A DarkSeaGreen #8FBC8B DarkSlateBlue #483D8B DarkSlateGray #2F4F4F DarkTurquoise #00CED1 DarkViolet #9400D3 DeepPink #FF1493 DeepSkyBlue #00BFFF DimGray #696969 DodgerBlue #1E90FF Firebrick #B22222 FloralWhite #FFFAF0 ForestGreen #228B22 Fuchsia #FF00FF Gainsboro #DCDCDC GhostWhite #F8F8FF Gold #FFD700 Goldenrod #DAA520 Gray #808080 Green #008000 GreenYellow #ADFF2F Honeydew #F0FFF0 HotPink #FF69B4 IndianRed #CD5C5C Indigo #4B0082 Ivory #FFFFF0 Khaki #F0E68C Lavender #E6E6FA LavenderBlush #FFF0F5 LawnGreen #7CFC00 LemonChiffon #FFFACD LightBlue #ADD8E6 LightCoral #F08080 LightCyan #E0FFFF LightGoldenrodYellow #FAFAD2 LightGreen #90EE90 LightGray #D3D3D3 LightPink #FFB6C1 LightSalmon #FFA07A LightSeaGreen #20B2AA LightSkyBlue #87CEFA LightSlateGray #778899 LightSteelBlue #B0C4DE LightYellow #FFFFE0 Lime #00FF00 LimeGreen #32CD32 Linen #FAF0E6 Magenta #FF00FF Maroon #800000 MediumAquamarine #66CDAA MediumBlue #0000CD MediumOrchid #BA55D3 MediumPurple #9370DB MediumSeaGreen #3CB371 MediumSlateBlue #7B68EE MediumSpringGreen #00FA9A MediumTurquoise #48D1CC MediumVioletRed #C71585 MidnightBlue #191970 MintCream #F5FFFA MistyRose #FFE4E1 Moccasin #FFE4B5 NavajoWhite #FFDEAD Navy #000080 OldLace #FDF5E6 Olive #808000 OliveDrab #6B8E23 Orange #FFA500 OrangeRed #FF4500 Orchid #DA70D6 PaleGoldenrod #EEE8AA PaleGreen #98FB98 PaleTurquoise #AFEEEE PaleVioletRed #DB7093 PapayaWhip #FFEFD5 PeachPuff #FFDAB9 Peru #CD853F Pink #FFC0CB Plum #DDA0DD PowderBlue #B0E0E6 Purple #800080 Red #FF0000 RebeccaPurple #663399 RosyBrown #BC8F8F RoyalBlue #4169E1 SaddleBrown #8B4513 Salmon #FA8072 SandyBrown #F4A460 SeaGreen #2E8B57 SeaShell #FFF5EE Sienna #A0522D Silver #C0C0C0 SkyBlue #87CEEB SlateBlue #6A5ACD SlateGray #708090 Snow #FFFAFA SpringGreen #00FF7F SteelBlue #4682B4 Tan #D2B48C Teal #008080 Thistle #D8BFD8 Tomato #FF6347 Turquoise #40E0D0 Violet #EE82EE Wheat #F5DEB3 White #FFFFFF WhiteSmoke #F5F5F5 Yellow #FFFF00 YellowGreen #9ACD32 Get Random Color Returns a random color. Usage let color = PFHelper . getRandomColor ( hex ); hex If true, it starts with \"#\" prefix. If false it starts with \"0x\" prefix. (bool) Get Gradient Color Array Returns a gradient color array from given start color and end color. Usage let color = PFHelper . getGradientColor ( startColor , endColor , colorCount , hex ); // color variable is Array now. startColor A string representing \"start color\" of the gradient array. (string) endColor A string representing \"end color\" of the gradient array. (string) colorCount Size of the gradient array. (number) hex If true, it starts with \"#\" prefix. If false it starts with \"0x\" prefix. (bool) Color Lerp Similar to mapValue, this function lerps one color towards other and you can get any intermediate color with ratio. Usage let color = PFHelper . colorLerp ( startColor , ratio , colorCount , hex ); startColor A string representing \"start color\" (string) endColor A string representing \"end color\" (string) ratio A number between 0-1 to get the intermediate color. (float) hex If true, it starts with \"#\" prefix. If false it starts with \"0x\" prefix. (bool) Convert To Hex Convert RGB to hex string. Usage let color = PFHelper . convertToHex ( rgb , hex ); rgb An array which contains the RGB values. (array) hex If true, it starts with \"#\" prefix. If false it starts with \"0x\" prefix. (bool) Convert To RGB Convert a hex string to an RGB triplet. Usage let color = PFHelper . convertToHex ( hexValue ); hexValue Hex string \"can start with '#' or '0x' or without any\". (string)","title":"ColorsHelper"},{"location":"colorsHelper/#colors-helper","text":"","title":"Colors Helper"},{"location":"colorsHelper/#introduction","text":"ColorsHelper has many functions regarding colors. The main reason this was created is to enable users to choose colors from a predetermined set. Author: Tunahan G\u00f6rm\u00fc\u015f","title":"Introduction"},{"location":"colorsHelper/#functions-list","text":"getColor() getRandomColor() getGradientColorArray() colorLerp() convertToHex() convertToRGB()","title":"Functions List"},{"location":"colorsHelper/#get-color","text":"PFHelper . getColor ( color , subCodes , hex ); color Name of the color (string) subCodes Color tone (string) hex If true, it starts with \"#\" prefix. If false it starts with \"0x\" prefix. (boolean) There is two different json file contains different colors. Colors source See colors.json to check out all the colors in our repository!","title":"Get Color"},{"location":"colorsHelper/#colors-with-subs","text":"","title":"Colors With Subs"},{"location":"colorsHelper/#usage","text":"let color = PFHelper . getColor ( \"red\" , \"900\" , true ); // subCodes: 50, 100, 200, 300, 400, 500, 600, 700, 800, 900, a100, a200, a400, a700 Sub Codes You can think of sub-codes as a color tone. If the value is low, it means light and high if it is dark.","title":"Usage"},{"location":"colorsHelper/#colors","text":"The sub-codes of the colors shown below are selected as 900. red pink purple deeppurple indigo blue lightblue cyan teal green lightgreen lime yellow amber orange deeporange brown grey bluegrey","title":"Colors"},{"location":"colorsHelper/#color-palette","text":"","title":"Color Palette"},{"location":"colorsHelper/#usage_1","text":"let color = PFHelper . getColor ( \"red\" , \"\" , true ); Color Palette You don't have to write anything on subCode.","title":"Usage"},{"location":"colorsHelper/#colors_1","text":"AliceBlue #F0F8FF AntiqueWhite #FAEBD7 Aqua #00FFFF Aquamarine #7FFFD4 Azure #F0FFFF Beige #F5F5DC Bisque #FFE4C4 Black #000000 BlanchedAlmond #FFEBCD Blue #0000FF BlueViolet #8A2BE2 Brown #A52A2A BurlyWood #DEB887 CadetBlue #5F9EA0 Chartreuse #7FFF00 Chocolate #D2691E Coral #FF7F50 CornflowerBlue #6495ED Cornsilk #FFF8DC Crimson #DC143C Cyan #00FFFF DarkBlue #00008B DarkCyan #008B8B DarkGoldenrod #B8860B DarkGray #A9A9A9 DarkGreen #006400 DarkKhaki #BDB76B DarkMagenta #8B008B DarkOliveGreen #556B2F DarkOrange #FF8C00 DarkOrchid #9932CC DarkRed #8B0000 DarkSalmon #E9967A DarkSeaGreen #8FBC8B DarkSlateBlue #483D8B DarkSlateGray #2F4F4F DarkTurquoise #00CED1 DarkViolet #9400D3 DeepPink #FF1493 DeepSkyBlue #00BFFF DimGray #696969 DodgerBlue #1E90FF Firebrick #B22222 FloralWhite #FFFAF0 ForestGreen #228B22 Fuchsia #FF00FF Gainsboro #DCDCDC GhostWhite #F8F8FF Gold #FFD700 Goldenrod #DAA520 Gray #808080 Green #008000 GreenYellow #ADFF2F Honeydew #F0FFF0 HotPink #FF69B4 IndianRed #CD5C5C Indigo #4B0082 Ivory #FFFFF0 Khaki #F0E68C Lavender #E6E6FA LavenderBlush #FFF0F5 LawnGreen #7CFC00 LemonChiffon #FFFACD LightBlue #ADD8E6 LightCoral #F08080 LightCyan #E0FFFF LightGoldenrodYellow #FAFAD2 LightGreen #90EE90 LightGray #D3D3D3 LightPink #FFB6C1 LightSalmon #FFA07A LightSeaGreen #20B2AA LightSkyBlue #87CEFA LightSlateGray #778899 LightSteelBlue #B0C4DE LightYellow #FFFFE0 Lime #00FF00 LimeGreen #32CD32 Linen #FAF0E6 Magenta #FF00FF Maroon #800000 MediumAquamarine #66CDAA MediumBlue #0000CD MediumOrchid #BA55D3 MediumPurple #9370DB MediumSeaGreen #3CB371 MediumSlateBlue #7B68EE MediumSpringGreen #00FA9A MediumTurquoise #48D1CC MediumVioletRed #C71585 MidnightBlue #191970 MintCream #F5FFFA MistyRose #FFE4E1 Moccasin #FFE4B5 NavajoWhite #FFDEAD Navy #000080 OldLace #FDF5E6 Olive #808000 OliveDrab #6B8E23 Orange #FFA500 OrangeRed #FF4500 Orchid #DA70D6 PaleGoldenrod #EEE8AA PaleGreen #98FB98 PaleTurquoise #AFEEEE PaleVioletRed #DB7093 PapayaWhip #FFEFD5 PeachPuff #FFDAB9 Peru #CD853F Pink #FFC0CB Plum #DDA0DD PowderBlue #B0E0E6 Purple #800080 Red #FF0000 RebeccaPurple #663399 RosyBrown #BC8F8F RoyalBlue #4169E1 SaddleBrown #8B4513 Salmon #FA8072 SandyBrown #F4A460 SeaGreen #2E8B57 SeaShell #FFF5EE Sienna #A0522D Silver #C0C0C0 SkyBlue #87CEEB SlateBlue #6A5ACD SlateGray #708090 Snow #FFFAFA SpringGreen #00FF7F SteelBlue #4682B4 Tan #D2B48C Teal #008080 Thistle #D8BFD8 Tomato #FF6347 Turquoise #40E0D0 Violet #EE82EE Wheat #F5DEB3 White #FFFFFF WhiteSmoke #F5F5F5 Yellow #FFFF00 YellowGreen #9ACD32","title":"Colors"},{"location":"colorsHelper/#get-random-color","text":"Returns a random color.","title":"Get Random Color"},{"location":"colorsHelper/#usage_2","text":"let color = PFHelper . getRandomColor ( hex ); hex If true, it starts with \"#\" prefix. If false it starts with \"0x\" prefix. (bool)","title":"Usage"},{"location":"colorsHelper/#get-gradient-color-array","text":"Returns a gradient color array from given start color and end color.","title":"Get Gradient Color Array"},{"location":"colorsHelper/#usage_3","text":"let color = PFHelper . getGradientColor ( startColor , endColor , colorCount , hex ); // color variable is Array now. startColor A string representing \"start color\" of the gradient array. (string) endColor A string representing \"end color\" of the gradient array. (string) colorCount Size of the gradient array. (number) hex If true, it starts with \"#\" prefix. If false it starts with \"0x\" prefix. (bool)","title":"Usage"},{"location":"colorsHelper/#color-lerp","text":"Similar to mapValue, this function lerps one color towards other and you can get any intermediate color with ratio.","title":"Color Lerp"},{"location":"colorsHelper/#usage_4","text":"let color = PFHelper . colorLerp ( startColor , ratio , colorCount , hex ); startColor A string representing \"start color\" (string) endColor A string representing \"end color\" (string) ratio A number between 0-1 to get the intermediate color. (float) hex If true, it starts with \"#\" prefix. If false it starts with \"0x\" prefix. (bool)","title":"Usage"},{"location":"colorsHelper/#convert-to-hex","text":"Convert RGB to hex string.","title":"Convert To Hex"},{"location":"colorsHelper/#usage_5","text":"let color = PFHelper . convertToHex ( rgb , hex ); rgb An array which contains the RGB values. (array) hex If true, it starts with \"#\" prefix. If false it starts with \"0x\" prefix. (bool)","title":"Usage"},{"location":"colorsHelper/#convert-to-rgb","text":"Convert a hex string to an RGB triplet.","title":"Convert To RGB"},{"location":"colorsHelper/#usage_6","text":"let color = PFHelper . convertToHex ( hexValue ); hexValue Hex string \"can start with '#' or '0x' or without any\". (string)","title":"Usage"},{"location":"mathsHelper/","text":"MathsHelper Introduction MathsHelper aims to aid you in doing somewhat complicated mathematical algorithms. It mainly has functions that are easy to calculate, but are susceptible of repeated usage in normal code. So, we wrapped functions that we liked and put them in MathsHelper for you. Author: Tayfun Turgut Functions List constrainNumber() dist() mapValue() convertNumToCustomFormat() generateBlankArray() rotateArray() Usage constrainNumber Sandwich a number between two numbers Constrains the input between min and max values. Useful especially when you don't know the return value of input and want to constrain it somehow. let num = PFHelper . constrainNumber ( input , min , max ) input: 0 : Input value to be constrained min: 0 : Minimum value of the constrain max: 1 : Maximum value of the constrain Example: let lastWidth = 25 ; let test = PFHelper . constainNumber ( lastWidth , 10 , 20 ); console . log ( test ); // 20 dist Distance finder Finds the distance between two 2D objects. let num = PFHelper . dist ( obj1 , obj2 ) obj1 : First object obj2 : Second object Example: let test = PFHelper . dist ( rect1 , rect2 ); console . log ( test ); // 5.2 This function can be used with any two points! If you want to use points and not legit Phaser objects, then pass parameters as: dist({x: x1 , y: y1}, {x: x2, y: y2}) See {Phaser Object} Example: let test = PFHelper . dist ({ x : 2 , y : 2 }, { x : 5 , y : 6 }); console . log ( test ); // 5 mapValue Linearly maps value from the range (a..b) to (c..d) \"If input is between a and b, what does it correlate if it was between c and d instead?\" let num = PFHelper . mapValue ( value , a , b , c , d ) value: 0 : The value to be mapped a: 0 : Lower boundary of input b: 1 : Upper boundary of input c: 0 : Lower boundary of output d: 1 : Upper boundary of output Example: let test = PFHelper . mapValue ( 0.5 , 0 , 1 , 0 , 100 ); console . log ( test ); // 50 convertNumToCustomFormat 1.000 is K, 1.000.000 is M, 1.000.000.000 is B.. Convert number to K-M-B notation, with given decimals, and constrains the number to positive or negative region if needed. See the 'aa' notation let custom = PFHelper . convertNumToCustomFormat ( num , decimal , constrain ) num: 0 : The number to be converted decimal: 0 : The number of decimal places to be used in the conversion. Can be 0, 1 or 2 constrain: \"none\" : \"pos\": positive constrain, \"neg\": negative constrain, \"none\": no constrain Example: let test = PFHelper . convertNumToCustomFormat ( 10000 , 1 , \"pos\" ) console . log ( test ); // 10.0K generateBlankArray Generate a blank array in replacement of an \"i\" loop. Generate a blank array in which the value of the elements of the array are equal to their index numbers. This way, you can just use for (let i of generateBlankArray(n)) instead of using the i syntax. This is for simplifying for loops and must only be used for the most basic cases. let array = PFHelper . generateBlankArray ( n , ascending ) n: 0 : Number of elements in the array ascending: true : Changes whether the blank array ascend or descend in values. Example: let test = PFHelper . generateBlankArray ( 5 , true ) console . log ( test ); // [0, 1, 2, 3, 4] let test = PFHelper . generateBlankArray ( 5 , false ) console . log ( test ); // [4, 3, 2, 1, 0] rotateArray Rotate an array of points with an angle. Rotate a 2D array of x-y couples wrt a point array containing an x-y couple and an angle. let array = PFHelper . rotateArray ( array , point , angle ) array : 2D array containing x-y pairs of points point : An array containing x-y values of the anchor point angle : The angle of rotation Example: let rectPos = [ 50 , 50 ]; let anchor = [ 0 , 0 ]; let test = PFHelper . rotateArray ( rectPos , anchor , 90 ); console . log ( test ); // [0, 1, 2, 3, 4]","title":"MathsHelper"},{"location":"mathsHelper/#mathshelper","text":"","title":"MathsHelper"},{"location":"mathsHelper/#introduction","text":"MathsHelper aims to aid you in doing somewhat complicated mathematical algorithms. It mainly has functions that are easy to calculate, but are susceptible of repeated usage in normal code. So, we wrapped functions that we liked and put them in MathsHelper for you. Author: Tayfun Turgut","title":"Introduction"},{"location":"mathsHelper/#functions-list","text":"constrainNumber() dist() mapValue() convertNumToCustomFormat() generateBlankArray() rotateArray()","title":"Functions List"},{"location":"mathsHelper/#usage","text":"","title":"Usage"},{"location":"mathsHelper/#constrainnumber","text":"Sandwich a number between two numbers Constrains the input between min and max values. Useful especially when you don't know the return value of input and want to constrain it somehow. let num = PFHelper . constrainNumber ( input , min , max ) input: 0 : Input value to be constrained min: 0 : Minimum value of the constrain max: 1 : Maximum value of the constrain Example: let lastWidth = 25 ; let test = PFHelper . constainNumber ( lastWidth , 10 , 20 ); console . log ( test ); // 20","title":"constrainNumber"},{"location":"mathsHelper/#dist","text":"Distance finder Finds the distance between two 2D objects. let num = PFHelper . dist ( obj1 , obj2 ) obj1 : First object obj2 : Second object Example: let test = PFHelper . dist ( rect1 , rect2 ); console . log ( test ); // 5.2 This function can be used with any two points! If you want to use points and not legit Phaser objects, then pass parameters as: dist({x: x1 , y: y1}, {x: x2, y: y2}) See {Phaser Object} Example: let test = PFHelper . dist ({ x : 2 , y : 2 }, { x : 5 , y : 6 }); console . log ( test ); // 5","title":"dist"},{"location":"mathsHelper/#mapvalue","text":"Linearly maps value from the range (a..b) to (c..d) \"If input is between a and b, what does it correlate if it was between c and d instead?\" let num = PFHelper . mapValue ( value , a , b , c , d ) value: 0 : The value to be mapped a: 0 : Lower boundary of input b: 1 : Upper boundary of input c: 0 : Lower boundary of output d: 1 : Upper boundary of output Example: let test = PFHelper . mapValue ( 0.5 , 0 , 1 , 0 , 100 ); console . log ( test ); // 50","title":"mapValue"},{"location":"mathsHelper/#convertnumtocustomformat","text":"1.000 is K, 1.000.000 is M, 1.000.000.000 is B.. Convert number to K-M-B notation, with given decimals, and constrains the number to positive or negative region if needed. See the 'aa' notation let custom = PFHelper . convertNumToCustomFormat ( num , decimal , constrain ) num: 0 : The number to be converted decimal: 0 : The number of decimal places to be used in the conversion. Can be 0, 1 or 2 constrain: \"none\" : \"pos\": positive constrain, \"neg\": negative constrain, \"none\": no constrain Example: let test = PFHelper . convertNumToCustomFormat ( 10000 , 1 , \"pos\" ) console . log ( test ); // 10.0K","title":"convertNumToCustomFormat"},{"location":"mathsHelper/#generateblankarray","text":"Generate a blank array in replacement of an \"i\" loop. Generate a blank array in which the value of the elements of the array are equal to their index numbers. This way, you can just use for (let i of generateBlankArray(n)) instead of using the i syntax. This is for simplifying for loops and must only be used for the most basic cases. let array = PFHelper . generateBlankArray ( n , ascending ) n: 0 : Number of elements in the array ascending: true : Changes whether the blank array ascend or descend in values. Example: let test = PFHelper . generateBlankArray ( 5 , true ) console . log ( test ); // [0, 1, 2, 3, 4] let test = PFHelper . generateBlankArray ( 5 , false ) console . log ( test ); // [4, 3, 2, 1, 0]","title":"generateBlankArray"},{"location":"mathsHelper/#rotatearray","text":"Rotate an array of points with an angle. Rotate a 2D array of x-y couples wrt a point array containing an x-y couple and an angle. let array = PFHelper . rotateArray ( array , point , angle ) array : 2D array containing x-y pairs of points point : An array containing x-y values of the anchor point angle : The angle of rotation Example: let rectPos = [ 50 , 50 ]; let anchor = [ 0 , 0 ]; let test = PFHelper . rotateArray ( rectPos , anchor , 90 ); console . log ( test ); // [0, 1, 2, 3, 4]","title":"rotateArray"},{"location":"objectRegister/","text":"ObjectRegister Introduction One instance per Phaser Scene is automatically created when PFHelper is imported. ObjectRegister is responsible for keeping track of objects, automatically asigning them resize functions and most importantly, gives them names. The functions are called from the scene objectRegister is instantiated within. The system works like this: Every scene has an object register in it and you submit objects to it by giving a segment and a name . Later on, you can just get the objects registered with the same segment or you can just get the object with the name you gave. All functions which create new objects sets the origin to (0.5, 0.5) by default, so you must change it according to your needs if necessary. See {Phaser Scene} Author: Tayfun Turgut Functions List registerObj() registerImage() registerRectangle() getObject() getSegment() removeSegment() Usage registerObj Register any arbitrary object to the manager. Register any object. Note that you must provide the object with its resize function for full functionality. Registers objects with the following format: segmentName . You can manually get and log the objects array from: Phaser Scene => objectRegister => {object} objects . The function returns the object itself. let obj = scene . objectRegister . registerObj ( config = { segment , name , obj }); segment: \"game\" : The segment of the object name: \"temp\" : The name of the object obj: {} : The object to register Example: let tempObj = ui . add . rectangle ( 0 , 0 , 100 , 100 ). setFillStyle ( 0x000000 , 1 ); ui . resizeManager . add ( tempObj , function () { this . setScale ( Math . max ( lastWidth / this . width , lastHeight / this . height )); this . x = lastWidth / 2 ; this . y = lastHeight / 2 ; }); let test = ui . objectRegister . registerObj ({ segment : \"intro\" , name : \"background\" , obj : tempObj }); console . log ( test ); // tempObj console . log ( test . segment ); // intro console . log ( test . name ); // background registerImage Register an image to the manager. Registers an image to the manager. Here, you don't need to specify the resize functionality beforehand, rather you can just give it as a parameter and the manager will add it for you. Registers objects with the following format: segmentName . You can manually get and log the objects array from: Phaser Scene => objectRegister => {object} objects . The function returns the object itself. let obj = scene . objectRegister . registerImage ( config = { segment , name , atlas , key , scale , position }); segment: \"game\" : The segment of the object name: \"temp\" : The name of the object atlas: false : If the iamge is part of an atlas. key: \"\" : The key of the image scale: function() {return 1;} : The function which returns the desired scale of the image. Note that the function must return the scale of the function, so that it can be calculated in the runtime. position: function() {return {x: 0, y: 0};} : The function which returns the desired position object of the image. Note that the function must return the position of the function, as another object containing x and y values, so that it can be calculated in the runtime. Example: let introRect = ui . objectRegister . registerImage ({ segment : \"intro\" , name : \"background\" , atlas : false , key : \"intro_bg\" , scale : function () { return Math . max ( lastWidth / this . width , lastHeight / this . height ) }, position : function () { return { x : lastWidth / 2 , y : lastHeight / 2 } } }); registerRectangle Register a rectangle to the manager. Registers a rectangle to the manager. Here, you don't need to specify the resize functionality beforehand, rather you can just give it as a parameter and the manager will add it for you. Registers objects with the following format: segmentName . You can manually get and log the objects array from: Phaser Scene => objectRegister => {object} objects . The function returns the object itself. let obj = scene . registerRectangle ( config = { segment , name , scale , position }); segment: \"game\" : The segment of the object name: \"temp\" : The name of the object scale: function() {return {scaleX: 1, scaleY: 1};} : The function which returns the desired scale of the image. Note that the function must return the scale of the function, so that it can be calculated in the runtime. Unlike the previous example, here we must give scaleX and scaleY values seperately to ensure the dimensions of the rectangle. position: function() {return {x: 0, y: 0};} : The function which returns the desired position object of the image. Note that the function must return the position of the function, as another object containing x and y values, so that it can be calculated in the runtime. Example: let introRect = ui . objectRegister . registerImage ({ segment : \"intro\" , name : \"background\" , scale : function () { return { scaleX : lastWidth / this . width , scaleY : lastHeight / this . height } }, position : function () { return { x : lastWidth / 2 , y : lastHeight / 2 } } }); getObject Get an object based on its segment and name. Gets an object from register by segment and name. let obj = scene . objectRegister . getObject ( segment , name ); segment: \"game\" : The segment of the object name: \"temp\" : The name of the object Example: let test = ui . objectRegister . getObject ( \"intro\" , \"background\" ); console . log ( test ); // {object} introBackground getSegment Get all objects registered to the specified segment. Returns an array that contains all objects registered in the given segment. let array = scene . objectRegister . getSegment ( segment ); segment: \"game\" : The segment of the object Example: let test = ui . objectRegister . getSegment ( \"intro\" ); console . log ( test ); // {array} [introBackground] removeSegment Remove all objects registered to the specified segment. Removes (removes from resizemanager and Phaserly destroys) all objects registered in the given segment. Note that all these objects must be Phaser objects, so caution is advised, especially when working with particle emitters vs, since they can't be Phaserly destroyed. It could be wise to register it with another segment. See Particle Emitter scene . objectRegister . removeSegment ( segment ); segment: \"game\" : The segment of the object Example: ui . objectRegister . removeSegment ( \"intro\" ); let test = ui . objectRegister . getSegment ( \"intro\" ); console . log ( test ); // []","title":"ObjectRegister"},{"location":"objectRegister/#objectregister","text":"","title":"ObjectRegister"},{"location":"objectRegister/#introduction","text":"One instance per Phaser Scene is automatically created when PFHelper is imported. ObjectRegister is responsible for keeping track of objects, automatically asigning them resize functions and most importantly, gives them names. The functions are called from the scene objectRegister is instantiated within. The system works like this: Every scene has an object register in it and you submit objects to it by giving a segment and a name . Later on, you can just get the objects registered with the same segment or you can just get the object with the name you gave. All functions which create new objects sets the origin to (0.5, 0.5) by default, so you must change it according to your needs if necessary. See {Phaser Scene} Author: Tayfun Turgut","title":"Introduction"},{"location":"objectRegister/#functions-list","text":"registerObj() registerImage() registerRectangle() getObject() getSegment() removeSegment()","title":"Functions List"},{"location":"objectRegister/#usage","text":"","title":"Usage"},{"location":"objectRegister/#registerobj","text":"Register any arbitrary object to the manager. Register any object. Note that you must provide the object with its resize function for full functionality. Registers objects with the following format: segmentName . You can manually get and log the objects array from: Phaser Scene => objectRegister => {object} objects . The function returns the object itself. let obj = scene . objectRegister . registerObj ( config = { segment , name , obj }); segment: \"game\" : The segment of the object name: \"temp\" : The name of the object obj: {} : The object to register Example: let tempObj = ui . add . rectangle ( 0 , 0 , 100 , 100 ). setFillStyle ( 0x000000 , 1 ); ui . resizeManager . add ( tempObj , function () { this . setScale ( Math . max ( lastWidth / this . width , lastHeight / this . height )); this . x = lastWidth / 2 ; this . y = lastHeight / 2 ; }); let test = ui . objectRegister . registerObj ({ segment : \"intro\" , name : \"background\" , obj : tempObj }); console . log ( test ); // tempObj console . log ( test . segment ); // intro console . log ( test . name ); // background","title":"registerObj"},{"location":"objectRegister/#registerimage","text":"Register an image to the manager. Registers an image to the manager. Here, you don't need to specify the resize functionality beforehand, rather you can just give it as a parameter and the manager will add it for you. Registers objects with the following format: segmentName . You can manually get and log the objects array from: Phaser Scene => objectRegister => {object} objects . The function returns the object itself. let obj = scene . objectRegister . registerImage ( config = { segment , name , atlas , key , scale , position }); segment: \"game\" : The segment of the object name: \"temp\" : The name of the object atlas: false : If the iamge is part of an atlas. key: \"\" : The key of the image scale: function() {return 1;} : The function which returns the desired scale of the image. Note that the function must return the scale of the function, so that it can be calculated in the runtime. position: function() {return {x: 0, y: 0};} : The function which returns the desired position object of the image. Note that the function must return the position of the function, as another object containing x and y values, so that it can be calculated in the runtime. Example: let introRect = ui . objectRegister . registerImage ({ segment : \"intro\" , name : \"background\" , atlas : false , key : \"intro_bg\" , scale : function () { return Math . max ( lastWidth / this . width , lastHeight / this . height ) }, position : function () { return { x : lastWidth / 2 , y : lastHeight / 2 } } });","title":"registerImage"},{"location":"objectRegister/#registerrectangle","text":"Register a rectangle to the manager. Registers a rectangle to the manager. Here, you don't need to specify the resize functionality beforehand, rather you can just give it as a parameter and the manager will add it for you. Registers objects with the following format: segmentName . You can manually get and log the objects array from: Phaser Scene => objectRegister => {object} objects . The function returns the object itself. let obj = scene . registerRectangle ( config = { segment , name , scale , position }); segment: \"game\" : The segment of the object name: \"temp\" : The name of the object scale: function() {return {scaleX: 1, scaleY: 1};} : The function which returns the desired scale of the image. Note that the function must return the scale of the function, so that it can be calculated in the runtime. Unlike the previous example, here we must give scaleX and scaleY values seperately to ensure the dimensions of the rectangle. position: function() {return {x: 0, y: 0};} : The function which returns the desired position object of the image. Note that the function must return the position of the function, as another object containing x and y values, so that it can be calculated in the runtime. Example: let introRect = ui . objectRegister . registerImage ({ segment : \"intro\" , name : \"background\" , scale : function () { return { scaleX : lastWidth / this . width , scaleY : lastHeight / this . height } }, position : function () { return { x : lastWidth / 2 , y : lastHeight / 2 } } });","title":"registerRectangle"},{"location":"objectRegister/#getobject","text":"Get an object based on its segment and name. Gets an object from register by segment and name. let obj = scene . objectRegister . getObject ( segment , name ); segment: \"game\" : The segment of the object name: \"temp\" : The name of the object Example: let test = ui . objectRegister . getObject ( \"intro\" , \"background\" ); console . log ( test ); // {object} introBackground","title":"getObject"},{"location":"objectRegister/#getsegment","text":"Get all objects registered to the specified segment. Returns an array that contains all objects registered in the given segment. let array = scene . objectRegister . getSegment ( segment ); segment: \"game\" : The segment of the object Example: let test = ui . objectRegister . getSegment ( \"intro\" ); console . log ( test ); // {array} [introBackground]","title":"getSegment"},{"location":"objectRegister/#removesegment","text":"Remove all objects registered to the specified segment. Removes (removes from resizemanager and Phaserly destroys) all objects registered in the given segment. Note that all these objects must be Phaser objects, so caution is advised, especially when working with particle emitters vs, since they can't be Phaserly destroyed. It could be wise to register it with another segment. See Particle Emitter scene . objectRegister . removeSegment ( segment ); segment: \"game\" : The segment of the object Example: ui . objectRegister . removeSegment ( \"intro\" ); let test = ui . objectRegister . getSegment ( \"intro\" ); console . log ( test ); // []","title":"removeSegment"},{"location":"resizeManager/","text":"ResizeManager Introduction The default resize manager used by the object register. Comes as default when importing PFHelper. It's usage is preferential, but recommended. It is added to each scene and is accessed via that scene. Resize function naming difference To prevent multiple triggers of resizing, here, the resize functions are simply named resize and can be accessed directly by typing test.resize() . Author: Berkecan G\u00fcrer Functions List add() remove() resize() Usage add Adds an object to the resize manager, to the given scene. Adds an object to the resize manager, to the given scene. Inside the resize function, this always scopes to the given object. scene . resizeManager . add ( object , resizeFunction ); object: {} : The object to be resized resizeFunction : The function which will be applied to the specified object Example: let test = ui . add . image ( 0 , 0 , \"intro_bg\" ); ui . resizeManager . add ( test , function () { this . setScale ( Math . max ( lastWidth / this . width , lastHeight / this . height )); this . x = lastWidth / 2 ; this . y = lastHeight / 2 ; }); console . log ( test . resize ); // f () resize remove Removes an object from the resize manager. Removes an object from the resize manager, preferable because you want to destroy it. scene . resizeManager . remove ( object ); object: {} : The object to be removed from the manager Example: let test = ui . add . image ( 0 , 0 , \"intro_bg\" ); ui . resizeManager . add ( test , function () { this . setScale ( Math . max ( lastWidth / this . width , lastHeight / this . height )); this . x = lastWidth / 2 ; this . y = lastHeight / 2 ; }); // later on.. ui . resizeManager . remove ( test ); test . destroy (); // success resize Resize all objects. This is the bread and butter of the resize manager. Runs the resize function of all objects registered to this resize manager. Note that this function should be added to the resizeAll() function in the template. scene . resizeManager . resize (); Example: ui . resizeManager . resize (); // resize all objects registered in ui resize manager","title":"ResizeManager"},{"location":"resizeManager/#resizemanager","text":"","title":"ResizeManager"},{"location":"resizeManager/#introduction","text":"The default resize manager used by the object register. Comes as default when importing PFHelper. It's usage is preferential, but recommended. It is added to each scene and is accessed via that scene. Resize function naming difference To prevent multiple triggers of resizing, here, the resize functions are simply named resize and can be accessed directly by typing test.resize() . Author: Berkecan G\u00fcrer","title":"Introduction"},{"location":"resizeManager/#functions-list","text":"add() remove() resize()","title":"Functions List"},{"location":"resizeManager/#usage","text":"","title":"Usage"},{"location":"resizeManager/#add","text":"Adds an object to the resize manager, to the given scene. Adds an object to the resize manager, to the given scene. Inside the resize function, this always scopes to the given object. scene . resizeManager . add ( object , resizeFunction ); object: {} : The object to be resized resizeFunction : The function which will be applied to the specified object Example: let test = ui . add . image ( 0 , 0 , \"intro_bg\" ); ui . resizeManager . add ( test , function () { this . setScale ( Math . max ( lastWidth / this . width , lastHeight / this . height )); this . x = lastWidth / 2 ; this . y = lastHeight / 2 ; }); console . log ( test . resize ); // f () resize","title":"add"},{"location":"resizeManager/#remove","text":"Removes an object from the resize manager. Removes an object from the resize manager, preferable because you want to destroy it. scene . resizeManager . remove ( object ); object: {} : The object to be removed from the manager Example: let test = ui . add . image ( 0 , 0 , \"intro_bg\" ); ui . resizeManager . add ( test , function () { this . setScale ( Math . max ( lastWidth / this . width , lastHeight / this . height )); this . x = lastWidth / 2 ; this . y = lastHeight / 2 ; }); // later on.. ui . resizeManager . remove ( test ); test . destroy (); // success","title":"remove"},{"location":"resizeManager/#resize","text":"Resize all objects. This is the bread and butter of the resize manager. Runs the resize function of all objects registered to this resize manager. Note that this function should be added to the resizeAll() function in the template. scene . resizeManager . resize (); Example: ui . resizeManager . resize (); // resize all objects registered in ui resize manager","title":"resize"}]}